<?php
class ControllerExtensionMeordermanagersetting extends Controller {
	private $error = array();
	public function index() {
		$this->load->language('extension/me_order_manager_setting');
		$this->document->setTitle($this->language->get('heading_title'));
		$this->load->model('setting/setting');		$this->load->model('extension/me_order_manager');				$this->model_extension_me_order_manager->create_table();		
		if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validate()) {			$this->model_setting_setting->editSetting('module_me_order_manager_setting', $this->request->post);						if (isset($this->request->post['module_me_order_manager_setting_template'])) {				$this->model_extension_me_order_manager->addEmailTemplate($this->request->post['module_me_order_manager_setting_template']);			}
			$this->session->data['success'] = $this->language->get('text_success');
			$this->response->redirect($this->url->link('extension/me_order_manager', 'user_token=' . $this->session->data['user_token'], true));		}
		if (isset($this->error['warning'])) {			$data['error_warning'] = $this->error['warning'];		} else {			$data['error_warning'] = '';		}
		$data['breadcrumbs'] = array();
		$data['breadcrumbs'][] = array(			'text' => $this->language->get('text_home'),			'href' => $this->url->link('common/dashboard', 'user_token=' . $this->session->data['user_token'], true)		);
		$data['breadcrumbs'][] = array(			'text' => $this->language->get('heading_title'),			'href' => $this->url->link('extension/me_order_manager_setting', 'user_token=' . $this->session->data['user_token'], true)		);
		$data['action'] = $this->url->link('extension/me_order_manager_setting', 'user_token=' . $this->session->data['user_token'], true);
		$data['cancel'] = $this->url->link('extension/me_order_manager', 'user_token=' . $this->session->data['user_token'] . '&type=module', true);
		$data['importdemo'] = $this->url->link('extension/me_order_manager_setting/importdemo', 'user_token=' . $this->session->data['user_token'] . '&type=module', true);
		$data['columns'] = array('order_id' => $this->language->get('entry_order_id'),'invoice_no' => $this->language->get('entry_invoice_no'),'invoice_prefix' => $this->language->get('entry_invoice_prefix'),'tracking_code' => $this->language->get('entry_tracking_code'),'store' => $this->language->get('entry_store'),'customer' => $this->language->get('entry_customer'),'customer_type' => $this->language->get('entry_customer_type'),'customer_group' => $this->language->get('entry_customer_group'),'payment_address' => $this->language->get('entry_payment_address'),'payment_method' => $this->language->get('entry_payment_method'),'shipping_address' => $this->language->get('entry_shipping_address'),'shipping_method' => $this->language->get('entry_shipping_method'),'comment' => $this->language->get('entry_comment'),'total' => $this->language->get('entry_total'),'order_weight' => $this->language->get('entry_order_weight'),'order_status' => $this->language->get('entry_order_status'),'affiliate' => $this->language->get('entry_affiliate'),'language' => $this->language->get('entry_language'),'currency' => $this->language->get('entry_currency'),'ip' => $this->language->get('entry_ip'),'product' => $this->language->get('entry_product'),'coupon' => $this->language->get('entry_coupon'),'voucher' => $this->language->get('entry_voucher'),'reward' => $this->language->get('entry_reward_point'),'date_added' => $this->language->get('entry_date_added'),'date_modified' => $this->language->get('entry_date_modified'));				$data['export_columns'] = array('order_id' => $this->language->get('entry_order_id'),'invoice_no' => $this->language->get('entry_invoice_no'),'invoice_prefix' => $this->language->get('entry_invoice_prefix'),'store' => $this->language->get('entry_store'),'store_url' => $this->language->get('entry_store_url'),'customer_id' => $this->language->get('entry_customer_id'),'customer' => $this->language->get('entry_customer'),'customer_group' => $this->language->get('entry_customer_group'),'email' => $this->language->get('entry_email'),'telephone' => $this->language->get('entry_telephone'),'fax' => $this->language->get('entry_fax'),'export_product' => $this->language->get('entry_excel_product'),'product_option' => $this->language->get('entry_excel_product_option'),'custom_field' => $this->language->get('entry_custom_field'),'payment_address' => $this->language->get('entry_payment_address'),'payment_custom_field' => $this->language->get('entry_payment_custom_field'),'payment_method' => $this->language->get('entry_payment_method'),'payment_code' => $this->language->get('entry_payment_code'),'shipping_address' => $this->language->get('entry_shipping_address'),'shipping_custom_field' => $this->language->get('entry_shipping_custom_field'),'shipping_method' => $this->language->get('entry_shipping_method'),'shipping_code' => $this->language->get('entry_shipping_code'),'comment' => $this->language->get('entry_comment'),'total' => $this->language->get('entry_total'),'total_details' => $this->language->get('entry_total_details'),'order_weight' => $this->language->get('entry_order_weight'),'reward' => $this->language->get('entry_reward'),'order_status_id' => $this->language->get('entry_order_status_id'),'order_status' => $this->language->get('entry_order_status'),'affiliate' => $this->language->get('entry_affiliate'),'commission' => $this->language->get('entry_commission'),'language_code' => $this->language->get('entry_language_code'),'language_directory' => $this->language->get('entry_language_directory'),'currency_code' => $this->language->get('entry_currency_code'),'currency_value' => $this->language->get('entry_currency_value'),'ip' => $this->language->get('entry_ip'),'user_agent' => $this->language->get('entry_user_agent'),'accept_language' => $this->language->get('entry_accept_language'),'tracking_code' => $this->language->get('entry_tracking_code'),'courier_name' => $this->language->get('entry_courier_name'),'date_added' => $this->language->get('entry_date_added'),'date_modified' => $this->language->get('entry_date_modified'));
		### Order Statuses		$this->load->model('localisation/order_status');		$data['order_statuses'] = $this->model_localisation_order_status->getOrderStatuses();
		### Get Countries		$this->load->model('localisation/country');		$data['countries'] = $this->model_localisation_country->getCountries();
		### General Tab ###		if (isset($this->request->post['module_me_order_manager_setting'])) {			$data['module_me_order_manager_setting'] = $this->request->post['module_me_order_manager_setting'];		} else {			$data['module_me_order_manager_setting'] = $this->config->get('module_me_order_manager_setting');		}
		### Filter Tab ###		if (isset($this->request->post['module_me_order_manager_setting_filter'])) {			$data['module_me_order_manager_setting_filter'] = $this->request->post['module_me_order_manager_setting_filter'];		} else {			$data['module_me_order_manager_setting_filter'] = $this->config->get('module_me_order_manager_setting_filter');		}
		### Column Tab ###		if (isset($this->request->post['module_me_order_manager_setting_column'])) {			$data['module_me_order_manager_setting_column'] = $this->request->post['module_me_order_manager_setting_column'];		} else {			$data['module_me_order_manager_setting_column'] = $this->config->get('module_me_order_manager_setting_column');		}
		$columns = $this->config->get('module_me_order_manager_setting_column');
		$data['order_manager_setting'] = array();
		$sortcolumns = array();
		if($columns){			if(!isset($columns['tracking_code'])){				$columns['tracking_code'] = array(					'sort_order' => 2,					'status' => isset($column['status']) ? $column['status'] : ''				);			}						if(!isset($columns['order_weight'])){				$columns['order_weight'] = array(					'sort_order' => 13,					'status' => isset($column['status']) ? $column['status'] : ''				);			}
			foreach($columns as $key => $column){				$sortcolumns[] = array(					'key' => $key,					'sort_order' => $column['sort_order'],					'name' => $this->language->get('entry_'.$key),					'status' => isset($column['status']) ? $column['status'] : ''				);			}
			function sortcolumn( $a, $b ){				return $a['sort_order'] < $b['sort_order'] ? -1 : 1;			}
			usort($sortcolumns, "sortcolumn");		}
		foreach($sortcolumns as $column){			$data['order_manager_setting'][$column['key']] = array(				'sort_order' => $column['sort_order'],				'status' => $column['status'],				'name' => $this->language->get('entry_'.$column['key']),				'sort' => isset($data['sort_'.$column['key']]) ? $data['sort_'.$column['key']] : ''			);		}				### Bulk Update Order Status Tab ###		if (isset($this->request->post['module_me_order_manager_setting_active_orderstatus'])) {			$data['module_me_order_manager_setting_active_orderstatus'] = $this->request->post['module_me_order_manager_setting_active_orderstatus'];		} else {			$data['module_me_order_manager_setting_active_orderstatus'] = $this->config->get('module_me_order_manager_setting_active_orderstatus');		}
		if (isset($this->request->post['module_me_order_manager_setting_bulkupdate'])) {			$data['module_me_order_manager_setting_bulkupdate'] = $this->request->post['module_me_order_manager_setting_bulkupdate'];		} else {			$data['module_me_order_manager_setting_bulkupdate'] = $this->config->get('module_me_order_manager_setting_bulkupdate');		}				$email_templates = $this->model_extension_me_order_manager->getEmailTemplate();				if (isset($this->request->post['module_me_order_manager_setting_template'])) {			$data['module_me_order_manager_setting_template'] = $this->request->post['module_me_order_manager_setting_template'];		}elseif($email_templates){			foreach($email_templates as $email_template){				$data['module_me_order_manager_setting_template'][$email_template['order_status_id']] = $email_template['template'];			}		}else{			if($this->config->get('module_me_order_manager_setting_bulkupdate')){				foreach($this->config->get('module_me_order_manager_setting_bulkupdate') as $key => $template_data){					if(isset($template_data['template'])){						$data['module_me_order_manager_setting_template'][$key] = $template_data['template'];					}				}			}		}				if (isset($this->request->post['module_me_order_manager_setting_sms'])) {			$data['module_me_order_manager_setting_sms'] = $this->request->post['module_me_order_manager_setting_sms'];		} else {			$data['module_me_order_manager_setting_sms'] = $this->config->get('module_me_order_manager_setting_sms');		}				if (isset($this->request->post['module_me_order_manager_setting_api'])) {			$data['module_me_order_manager_setting_api'] = $this->request->post['module_me_order_manager_setting_api'];		} else {			$data['module_me_order_manager_setting_api'] = $this->config->get('module_me_order_manager_setting_api');		}
		### Order Status Tab ###		if (isset($this->request->post['module_me_order_manager_setting_ostatus'])) {			$data['module_me_order_manager_setting_ostatus'] = $this->request->post['module_me_order_manager_setting_ostatus'];		} else {			$data['module_me_order_manager_setting_ostatus'] = $this->config->get('module_me_order_manager_setting_ostatus');		}
		### Order Tracking Tab ###		if (isset($this->request->post['module_me_order_manager_setting_tracking'])) {			$data['module_me_order_manager_setting_tracking'] = $this->request->post['module_me_order_manager_setting_tracking'];		} else {			$data['module_me_order_manager_setting_tracking'] = $this->config->get('module_me_order_manager_setting_tracking');		}				### Export Column Tab ###		if (isset($this->request->post['module_me_order_manager_setting_export_column_all'])) {			$data['module_me_order_manager_setting_export_column_all'] = $this->request->post['module_me_order_manager_setting_export_column_all'];		} else {			$data['module_me_order_manager_setting_export_column_all'] = $this->config->get('module_me_order_manager_setting_export_column_all');		}				if (isset($this->request->post['module_me_order_manager_setting_export_column'])) {			$data['module_me_order_manager_setting_export_column'] = $this->request->post['module_me_order_manager_setting_export_column'];		} else {			$data['module_me_order_manager_setting_export_column'] = $this->config->get('module_me_order_manager_setting_export_column');		}				$export_columns = $this->config->get('module_me_order_manager_setting_export_column');				$data['export_column_setting'] = array();		$exportsortcolumns = array();		if($export_columns){			foreach($export_columns as $key => $column){				$exportsortcolumns[] = array(					'key' => $key,					'sort_order' => $column['sort_order'],					'name' => $this->language->get('entry_'.$key),					'status' => isset($column['status']) ? $column['status'] : ''				);			}			function exportsortcolumn( $a, $b ){				return $a['sort_order'] < $b['sort_order'] ? -1 : 1;			}			usort($exportsortcolumns, "exportsortcolumn");		}		foreach($exportsortcolumns as $column){			$data['export_column_setting'][$column['key']] = array(				'sort_order' => $column['sort_order'],				'status' => $column['status'],				'name' => $this->language->get('entry_'.$column['key']),				'sort' => isset($data['sort_'.$column['key']]) ? $data['sort_'.$column['key']] : ''			);		}
			$data['header'] = $this->load->controller('common/header');		$data['column_left'] = $this->load->controller('common/column_left');		$data['footer'] = $this->load->controller('common/footer');
		$this->response->setOutput($this->load->view('extension/me_order_manager/me_order_manager_setting', $data));
	}
	public function importdemo(){
		$this->load->language('extension/me_order_manager_setting');
		$this->load->model('setting/setting');
		$data['module_me_order_manager_setting'] = array("quickviewbtn"=>"1","invoicebtn"=>"0","editbtn"=>"1","deletebtn"=>"0","bulkorderstatus"=>"1","bulkinvoicebtn"=>"1","bulkdeletebtn"=>"1","bulkshippingbtn"=>"0","order_detail"=>"1","customer_detail"=>"1","options"=>"1","orderinfo"=>"1","orderhistory"=>"1");
		$data['module_me_order_manager_setting_filter'] = array("status"=>"1","order_id"=>"1","customer"=>"1","order_status"=>"1","total"=>"1","date_added"=>"1","date_modified"=>"1","payment_method"=>"1","shipping_method"=>"1","customer_group"=>"1","store"=>"1");
		$data['module_me_order_manager_setting_column'] = array("order_id"=>array("sort_order"=>"0","status"=>"on"),"invoice_no"=>array("sort_order"=>"1"),"invoice_prefix"=>array("sort_order"=>"2"),"store"=>array("sort_order"=>"3","status"=>"on"),"customer"=>array("sort_order"=>"4","status"=>"on"),"customer_type"=>array("sort_order"=>"5","status"=>"on"),"customer_group"=>array("sort_order"=>"6","status"=>"on"),"payment_address"=>array("sort_order"=>"7"),"payment_method"=>array("sort_order"=>"8","status"=>"on"),"shipping_address"=>array("sort_order"=>"9"),"shipping_method"=>array("sort_order"=>"10","status"=>"on"),"comment"=>array("sort_order"=>"11"),"total"=>array("sort_order"=>"12","status"=>"on"),"order_status"=>array("sort_order"=>"13","status"=>"on"),"affiliate"=>array("sort_order"=>"14"),"language"=>array("sort_order"=>"15"),"currency"=>array("sort_order"=>"16"),"ip"=>array("sort_order"=>"17"),"product"=>array("sort_order"=>"18","status"=>"on"),"coupon"=>array("sort_order"=>"19"),"voucher"=>array("sort_order"=>"20"),"reward"=>array("sort_order"=>"21"),"date_added"=>array("sort_order"=>"22","status"=>"on"),"date_modified"=>array("sort_order"=>"23","status"=>"on"));
		$data['module_me_order_manager_setting_ostatus'] = array("7"=>array("bgcolor"=>"#cc0001","color"=>"#ffffff"),"9"=>array("bgcolor"=>"#cc0001","color"=>"#ffffff"),"13"=>array("bgcolor"=>"#999999","color"=>"#ffffff"),"5"=>array("bgcolor"=>"#73a723","color"=>"#ffffff"),"8"=>array("bgcolor"=>"#2f2f2f","color"=>"#ffffff"),"14"=>array("bgcolor"=>"#2f2f2f","color"=>"#ffffff"),"10"=>array("bgcolor"=>"#cc0001","color"=>"#ffffff"),"1"=>array("bgcolor"=>"#ffb801","color"=>"#ffffff"),"15"=>array("bgcolor"=>"#710eb6","color"=>"#ffffff"),"2"=>array("bgcolor"=>"#3771f4","color"=>"#ffffff"),"11"=>array("bgcolor"=>"#999999","color"=>"#ffffff"),"12"=>array("bgcolor"=>"#999999","color"=>"#ffffff"),"3"=>array("bgcolor"=>"#04461b","color"=>"#ffffff"),"16"=>array("bgcolor"=>"#2f2f2f","color"=>"#ffffff"));
		if ($this->validate()) {			$this->model_setting_setting->editSetting('module_me_order_manager_setting', $data);
			$this->session->data['success'] = $this->language->get('text_success');
			$this->response->redirect($this->url->link('extension/me_order_manager', 'user_token=' . $this->session->data['user_token'], true));		}	}
	protected function validate() {		if (!$this->user->hasPermission('modify', 'extension/me_order_manager_setting')) {			$this->error['warning'] = $this->language->get('error_permission');		}
		return !$this->error;	}
	public function getmessage(){		$json = array();
		if (isset($this->request->get['status_id'])) {			$status_id = $this->request->get['status_id'];		} else {			$status_id = 0;		}
		if(!$json){			$order_status_message = !empty($this->config->get('module_me_order_manager_setting_bulkupdate')[$status_id]) ? $this->config->get('module_me_order_manager_setting_bulkupdate')[$status_id] : array();
			if($order_status_message['status']){				$json['message'] = $order_status_message['comment'];			}		}
		$this->response->addHeader('Content-Type: application/json');		$this->response->setOutput(json_encode($json));	}
	
	public function getrackingmessage(){		$this->load->language('extension/me_order_manager_setting');		$json = array();
		if (isset($this->request->get['status_id'])) {			$status_id = $this->request->get['status_id'];		} else {			$status_id = '';		}
		if (isset($this->request->post['carrier_id'])) {			$carrier_id = $this->request->post['carrier_id'];		} else {			$carrier_id = '';		}
		if (isset($this->request->post['tracking_number'])) {			$tracking_number = $this->request->post['tracking_number'];		} else {			$tracking_number = '';		}
		if($carrier_id == ''){			$json['error_carrier_id'] = $this->language->get('error_carrier_id');		}
		if(empty($tracking_number) || $tracking_number == ''){			$json['error_tracking_number'] = $this->language->get('error_tracking_number');		}
		$order_manager_setting_tracking = $this->config->get('module_me_order_manager_setting_tracking');
		if($order_manager_setting_tracking['orderstatus'] != $status_id){
			$json['tracking'] = false; 
		}
		if(!$json){
			$json['notify_customer'] = false;
			if(!empty($order_manager_setting_tracking['status'])){
				if($order_manager_setting_tracking['orderstatus'] == $status_id){
					if($order_manager_setting_tracking['notify']){
						$json['notify_customer'] = true;
					}
					$order_manager_setting_carrier = !empty($order_manager_setting_tracking['carrier']) ? $order_manager_setting_tracking['carrier'] : array();
					if($order_manager_setting_carrier){
						$carrier_name = $order_manager_setting_carrier[$carrier_id]['name'];
						$tracking_url = str_replace('{tracking_number}',$tracking_number,$order_manager_setting_carrier[$carrier_id]['url']);
						$find = array(
							'{carrier_name}',
							'{tracking_code}',
							'{tracking_url}'
						);
						$replace = array(
							$carrier_name,
							$tracking_number,
							$tracking_url
						);
						$json['message'] = html_entity_decode(str_replace($find,$replace,$order_manager_setting_tracking['comment']));
					}
				}
			}
		}
		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($json));
	}
}